// main script for deploying SimpleStorage.sol
require("dotenv").config();
const fs = require("fs");
const ethers = require("ethers");
const { Console } = require("console");

async function main() {
  const provider = new ethers.providers.JsonRpcProvider(
    process.env.RPC_SERVER_ADDRESS
  );
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
  // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
  //   encryptedJson,
  //   process.env.PRIVATE_KEY_PASSWORD
  // );
  // wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf-8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );

  // a Contract factory is an object you can use to deploy contracts

  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract...");
  // in the deploy function, you can add overrides like gasPrice, gasLimit, etc.
  const contract = await contractFactory.deploy();
  await contract.deployTransaction.wait(1);

  console.log(`Contract address: ${contract.address}`);
  // console.log("Deployment transaction: ");
  // console.log("\t", contract.deployTransaction);

  // //   you can wait a certain number of mined blocks as confirmation
  // console.log("Transaction reciept: ");
  // console.log("\t", transactionReceipt);

  // console.log("----------------------------------------");
  // console.log("Deploy with only transaction data:\n");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 2000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b50610812806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780632fae4ffd1461007a5780636057361d146100aa5780636f760f41146100c65780639e7a13ad146100e2575b600080fd5b610064610113565b60405161007191906105c1565b60405180910390f35b610094600480360381019061008f91906104c5565b61011c565b6040516100a191906105c1565b60405180910390f35b6100c460048036038101906100bf919061050e565b61014a565b005b6100e060048036038101906100db9190610465565b610154565b005b6100fc60048036038101906100f7919061050e565b61022b565b60405161010a9291906105dc565b60405180910390f35b60008054905090565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b8060008190555050565b6001604051806040016040528083815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101fe9291906102e7565b50505080600284846040516102149291906105a8565b908152602001604051809103902081905550505050565b6001818154811061023b57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610264906106d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610290906106d5565b80156102dd5780601f106102b2576101008083540402835291602001916102dd565b820191906000526020600020905b8154815290600101906020018083116102c057829003601f168201915b5050505050905082565b8280546102f3906106d5565b90600052602060002090601f016020900481019282610315576000855561035c565b82601f1061032e57805160ff191683800117855561035c565b8280016001018555821561035c579182015b8281111561035b578251825591602001919060010190610340565b5b509050610369919061036d565b5090565b5b8082111561038657600081600090555060010161036e565b5090565b600061039d61039884610631565b61060c565b9050828152602081018484840111156103b9576103b86107a5565b5b6103c4848285610693565b509392505050565b60008083601f8401126103e2576103e161079b565b5b8235905067ffffffffffffffff8111156103ff576103fe610796565b5b60208301915083600182028301111561041b5761041a6107a0565b5b9250929050565b600082601f8301126104375761043661079b565b5b813561044784826020860161038a565b91505092915050565b60008135905061045f816107c5565b92915050565b60008060006040848603121561047e5761047d6107af565b5b600084013567ffffffffffffffff81111561049c5761049b6107aa565b5b6104a8868287016103cc565b935093505060206104bb86828701610450565b9150509250925092565b6000602082840312156104db576104da6107af565b5b600082013567ffffffffffffffff8111156104f9576104f86107aa565b5b61050584828501610422565b91505092915050565b600060208284031215610524576105236107af565b5b600061053284828501610450565b91505092915050565b6000610547838561067e565b9350610554838584610693565b82840190509392505050565b600061056b82610662565b610575818561066d565b93506105858185602086016106a2565b61058e816107b4565b840191505092915050565b6105a281610689565b82525050565b60006105b582848661053b565b91508190509392505050565b60006020820190506105d66000830184610599565b92915050565b60006040820190506105f16000830185610599565b81810360208301526106038184610560565b90509392505050565b6000610616610627565b90506106228282610707565b919050565b6000604051905090565b600067ffffffffffffffff82111561064c5761064b610767565b5b610655826107b4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156106c05780820151818401526020810190506106a5565b838111156106cf576000848401525b50505050565b600060028204905060018216806106ed57607f821691505b6020821081141561070157610700610738565b5b50919050565b610710826107b4565b810181811067ffffffffffffffff8211171561072f5761072e610767565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107ce81610689565b81146107d957600080fd5b5056fea2646970667358221220ded2cd7d427155c628032e29b08413dce715362164c959ae0d646378b81c345764736f6c63430008070033",
  //   chainId: 1337,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx); // this also signs the transaction
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);

  const currentFavoriteNumber = await contract.retrieve();
  console.log(`Current favorite number: ${currentFavoriteNumber.toString()}`);
  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedFavoriteNumber = await contract.retrieve();
  console.log(`Updated favorite number: ${updatedFavoriteNumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
